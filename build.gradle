import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile


plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.bmuschko.docker-remote-api' version "$dockerVersion"
	id 'com.bmuschko.docker-java-application' version '6.3.0'
}



java {
	sourceCompatibility = '17'
}
bootJar{
	enabled=false
}
jar{
	enabled=true
}

repositories {
	mavenCentral()
}
allprojects {
	group = 'com.company'
	def hash = 'git rev-parse --short HEAD'.execute().text.trim()
	version = "$projectVersion.$hash"
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'org.postgresql:postgresql'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
	}
}
def subProjects=[
        project(':ms1'),
		project(':ms2')
]
configure(subProjects) {
	task dockerFile(type: Dockerfile, dependsOn: assemble) {
		destFile.set(project.file('Dockerfile'))
		from "alpine:$alpineVersion"
		runCommand 'apk add --no-cache openjdk17'
		runCommand 'apk add --no-cache tzdata'
		copyFile "build/libs/${project.name}-${project.version}.jar", '/app/'
		copyFile "gradle.properties", '/app/gradle.properties'
		workingDir '/app/'
		entryPoint 'java'
		defaultCommand '-jar', "/app/${project.name}-${project.version}.jar"
	}


	task dockerBuild(type: DockerBuildImage, dependsOn: dockerFile) {
		inputDir.set(file("$projectDir/."))
		doLast {
			println("creatig image: $dockerRepoUrl/${project.name}:$version")
		}
		images.add("$dockerRepoUrl/${project.name}:$version")
	}

	task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
		images.add("$dockerRepoUrl/${project.name}:$version")

		registryCredentials.setUsername("$dockerHubUsername")
		registryCredentials.setPassword("$dockerHubPassword")
		registryCredentials.setEmail("$dockerHubEmail")
	}



}



tasks.named('test') {
	useJUnitPlatform()
}
